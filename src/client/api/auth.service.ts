/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Authenticate } from '../model/authenticate';
import { AuthenticateResponse } from '../model/authenticateResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AuthService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticate(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticate(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticate(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticate(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticate.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (provider !== undefined && provider !== null) {
            queryParameters = queryParameters.set('provider', <any>provider);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<AuthenticateResponse>(`${this.configuration.basePath}/auth`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticateDELETE(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticateDELETE(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticateDELETE(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticateDELETE(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticateDELETE.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (provider !== undefined && provider !== null) {
            queryParameters = queryParameters.set('provider', <any>provider);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<AuthenticateResponse>(`${this.configuration.basePath}/auth`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticateDELETE_1(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticateDELETE_1(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticateDELETE_1(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticateDELETE_1(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticateDELETE_1.');
        }
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling authenticateDELETE_1.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<AuthenticateResponse>(`${this.configuration.basePath}/auth/${encodeURIComponent(String(provider))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticateGET(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticateGET(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticateGET(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticateGET(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticateGET.');
        }
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling authenticateGET.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<AuthenticateResponse>(`${this.configuration.basePath}/auth/${encodeURIComponent(String(provider))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticatePOST(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticatePOST(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticatePOST(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticatePOST(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticatePOST.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (provider !== undefined && provider !== null) {
            queryParameters = queryParameters.set('provider', <any>provider);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AuthenticateResponse>(`${this.configuration.basePath}/auth`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticatePOST_2(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticatePOST_2(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticatePOST_2(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticatePOST_2(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticatePOST_2.');
        }
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling authenticatePOST_2.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AuthenticateResponse>(`${this.configuration.basePath}/auth/${encodeURIComponent(String(provider))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticatePUT(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticatePUT(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticatePUT(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticatePUT(accept: 'application/json', provider?: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticatePUT.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (provider !== undefined && provider !== null) {
            queryParameters = queryParameters.set('provider', <any>provider);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AuthenticateResponse>(`${this.configuration.basePath}/auth`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param provider 
     * @param state 
     * @param oauthToken 
     * @param oauthVerifier 
     * @param userName 
     * @param password 
     * @param rememberMe 
     * @param errorView 
     * @param nonce 
     * @param uri 
     * @param response 
     * @param qop 
     * @param nc 
     * @param cnonce 
     * @param useTokenCookie 
     * @param accessToken 
     * @param accessTokenSecret 
     * @param scope 
     * @param meta 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticatePUT_3(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'body', reportProgress?: boolean): Observable<AuthenticateResponse>;
    public authenticatePUT_3(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticateResponse>>;
    public authenticatePUT_3(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticateResponse>>;
    public authenticatePUT_3(accept: 'application/json', provider: string, state?: string, oauthToken?: string, oauthVerifier?: string, userName?: string, password?: string, rememberMe?: boolean, errorView?: string, nonce?: string, uri?: string, response?: string, qop?: string, nc?: string, cnonce?: string, useTokenCookie?: boolean, accessToken?: string, accessTokenSecret?: string, scope?: string, meta?: string, body?: Authenticate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling authenticatePUT_3.');
        }
        if (provider === null || provider === undefined) {
            throw new Error('Required parameter provider was null or undefined when calling authenticatePUT_3.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('State', <any>state);
        }
        if (oauthToken !== undefined && oauthToken !== null) {
            queryParameters = queryParameters.set('oauth_token', <any>oauthToken);
        }
        if (oauthVerifier !== undefined && oauthVerifier !== null) {
            queryParameters = queryParameters.set('oauth_verifier', <any>oauthVerifier);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (rememberMe !== undefined && rememberMe !== null) {
            queryParameters = queryParameters.set('RememberMe', <any>rememberMe);
        }
        if (errorView !== undefined && errorView !== null) {
            queryParameters = queryParameters.set('ErrorView', <any>errorView);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }
        if (uri !== undefined && uri !== null) {
            queryParameters = queryParameters.set('uri', <any>uri);
        }
        if (response !== undefined && response !== null) {
            queryParameters = queryParameters.set('response', <any>response);
        }
        if (qop !== undefined && qop !== null) {
            queryParameters = queryParameters.set('qop', <any>qop);
        }
        if (nc !== undefined && nc !== null) {
            queryParameters = queryParameters.set('nc', <any>nc);
        }
        if (cnonce !== undefined && cnonce !== null) {
            queryParameters = queryParameters.set('cnonce', <any>cnonce);
        }
        if (useTokenCookie !== undefined && useTokenCookie !== null) {
            queryParameters = queryParameters.set('UseTokenCookie', <any>useTokenCookie);
        }
        if (accessToken !== undefined && accessToken !== null) {
            queryParameters = queryParameters.set('AccessToken', <any>accessToken);
        }
        if (accessTokenSecret !== undefined && accessTokenSecret !== null) {
            queryParameters = queryParameters.set('AccessTokenSecret', <any>accessTokenSecret);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (meta !== undefined && meta !== null) {
            queryParameters = queryParameters.set('Meta', <any>meta);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AuthenticateResponse>(`${this.configuration.basePath}/auth/${encodeURIComponent(String(provider))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
