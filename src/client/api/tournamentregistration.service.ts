/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { TournamentRegistrationReisliRequest } from '../model/tournamentRegistrationReisliRequest';
import { TournamentRegistrationStsRequest } from '../model/tournamentRegistrationStsRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TournamentregistrationService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param accept Accept Header
     * @param tournament 
     * @param comment 
     * @param teamName 
     * @param total 
     * @param player1 
     * @param player2 
     * @param player3 
     * @param player4 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tournamentRegistrationReisli(accept: 'application/json', tournament?: string, comment?: string, teamName?: string, total?: number, player1?: string, player2?: string, player3?: string, player4?: string, body?: TournamentRegistrationReisliRequest, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public tournamentRegistrationReisli(accept: 'application/json', tournament?: string, comment?: string, teamName?: string, total?: number, player1?: string, player2?: string, player3?: string, player4?: string, body?: TournamentRegistrationReisliRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public tournamentRegistrationReisli(accept: 'application/json', tournament?: string, comment?: string, teamName?: string, total?: number, player1?: string, player2?: string, player3?: string, player4?: string, body?: TournamentRegistrationReisliRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public tournamentRegistrationReisli(accept: 'application/json', tournament?: string, comment?: string, teamName?: string, total?: number, player1?: string, player2?: string, player3?: string, player4?: string, body?: TournamentRegistrationReisliRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling tournamentRegistrationReisli.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (tournament !== undefined && tournament !== null) {
            queryParameters = queryParameters.set('Tournament', <any>tournament);
        }
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('Comment', <any>comment);
        }
        if (teamName !== undefined && teamName !== null) {
            queryParameters = queryParameters.set('TeamName', <any>teamName);
        }
        if (total !== undefined && total !== null) {
            queryParameters = queryParameters.set('Total', <any>total);
        }
        if (player1 !== undefined && player1 !== null) {
            queryParameters = queryParameters.set('Player1', <any>player1);
        }
        if (player2 !== undefined && player2 !== null) {
            queryParameters = queryParameters.set('Player2', <any>player2);
        }
        if (player3 !== undefined && player3 !== null) {
            queryParameters = queryParameters.set('Player3', <any>player3);
        }
        if (player4 !== undefined && player4 !== null) {
            queryParameters = queryParameters.set('Player4', <any>player4);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<object>(`${this.configuration.basePath}/tournamentregistration/reisli/`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param userMail 
     * @param userName 
     * @param tournaments 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tournamentRegistrationSts(accept: 'application/json', userMail?: string, userName?: string, tournaments?: string, body?: TournamentRegistrationStsRequest, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public tournamentRegistrationSts(accept: 'application/json', userMail?: string, userName?: string, tournaments?: string, body?: TournamentRegistrationStsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public tournamentRegistrationSts(accept: 'application/json', userMail?: string, userName?: string, tournaments?: string, body?: TournamentRegistrationStsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public tournamentRegistrationSts(accept: 'application/json', userMail?: string, userName?: string, tournaments?: string, body?: TournamentRegistrationStsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling tournamentRegistrationSts.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (userMail !== undefined && userMail !== null) {
            queryParameters = queryParameters.set('UserMail', <any>userMail);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('UserName', <any>userName);
        }
        if (tournaments !== undefined && tournaments !== null) {
            queryParameters = queryParameters.set('Tournaments', <any>tournaments);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<object>(`${this.configuration.basePath}/tournamentregistration/sts`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
