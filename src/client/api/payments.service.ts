/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { OpenUserPaymentResponse } from '../model/openUserPaymentResponse';
import { PayRequest } from '../model/payRequest';
import { PaymentInformationsDto } from '../model/paymentInformationsDto';
import { SavePaymentRquest } from '../model/savePaymentRquest';
import { UsersResponse } from '../model/usersResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class PaymentsService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Gets all users which do not yet have payed for the current season
     * Gets all users which do not yet have payed for the current season
     * @param accept Accept Header
     * @param seasonId 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDonePayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<UsersResponse>;
    public getDonePayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersResponse>>;
    public getDonePayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersResponse>>;
    public getDonePayments(accept: 'application/json', seasonId?: number, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getDonePayments.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (seasonId !== undefined && seasonId !== null) {
            queryParameters = queryParameters.set('SeasonId', <any>seasonId);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('Filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UsersResponse>(`${this.configuration.basePath}/payments/done`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all users which have already payed for the current season
     * Gets all users which have already payed for the current season
     * @param accept Accept Header
     * @param seasonId 
     * @param filter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOpenPayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'body', reportProgress?: boolean): Observable<UsersResponse>;
    public getOpenPayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersResponse>>;
    public getOpenPayments(accept: 'application/json', seasonId?: number, filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersResponse>>;
    public getOpenPayments(accept: 'application/json', seasonId?: number, filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getOpenPayments.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (seasonId !== undefined && seasonId !== null) {
            queryParameters = queryParameters.set('SeasonId', <any>seasonId);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('Filter', <any>filter);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UsersResponse>(`${this.configuration.basePath}/payments/open`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentCurrentUserCurrentSeason(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<object>;
    public getPaymentCurrentUserCurrentSeason(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public getPaymentCurrentUserCurrentSeason(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public getPaymentCurrentUserCurrentSeason(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getPaymentCurrentUserCurrentSeason.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<object>(`${this.configuration.basePath}/payments/currentUserCurrentSeason`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the payment-informations for the current division
     * Gets the payment-informations for the current division
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentInformationsGET(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<PaymentInformationsDto>;
    public getPaymentInformationsGET(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaymentInformationsDto>>;
    public getPaymentInformationsGET(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentInformationsDto>>;
    public getPaymentInformationsGET(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getPaymentInformationsGET.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<PaymentInformationsDto>(`${this.configuration.basePath}/payments/informations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all open payments for the current user
     * Gets all open payments for the current user
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserOpenPaymentsForCurrentSeason(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<OpenUserPaymentResponse>>;
    public getUserOpenPaymentsForCurrentSeason(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OpenUserPaymentResponse>>>;
    public getUserOpenPaymentsForCurrentSeason(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OpenUserPaymentResponse>>>;
    public getUserOpenPaymentsForCurrentSeason(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getUserOpenPaymentsForCurrentSeason.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<OpenUserPaymentResponse>>(`${this.configuration.basePath}/payments/open/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Executes the Stripe payment for the given user
     * Executes the Stripe payment for the given user
     * @param accept Accept Header
     * @param token 
     * @param amount 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pay(accept: 'application/json', token?: string, amount?: number, body?: PayRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pay(accept: 'application/json', token?: string, amount?: number, body?: PayRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pay(accept: 'application/json', token?: string, amount?: number, body?: PayRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pay(accept: 'application/json', token?: string, amount?: number, body?: PayRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling pay.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('Token', <any>token);
        }
        if (amount !== undefined && amount !== null) {
            queryParameters = queryParameters.set('Amount', <any>amount);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/payments/pay`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Does save the payment-state for a given user
     * Does save the payment-state for a given user
     * @param accept Accept Header
     * @param id 
     * @param hasPaid 
     * @param comment 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public savePaymentRquest(accept: 'application/json', id?: number, hasPaid?: boolean, comment?: string, body?: SavePaymentRquest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public savePaymentRquest(accept: 'application/json', id?: number, hasPaid?: boolean, comment?: string, body?: SavePaymentRquest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public savePaymentRquest(accept: 'application/json', id?: number, hasPaid?: boolean, comment?: string, body?: SavePaymentRquest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public savePaymentRquest(accept: 'application/json', id?: number, hasPaid?: boolean, comment?: string, body?: SavePaymentRquest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling savePaymentRquest.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (hasPaid !== undefined && hasPaid !== null) {
            queryParameters = queryParameters.set('HasPaid', <any>hasPaid);
        }
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('Comment', <any>comment);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/payments`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
