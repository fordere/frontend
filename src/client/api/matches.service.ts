/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { ExtendedMatchDto } from '../model/extendedMatchDto';
import { MatchDto } from '../model/matchDto';
import { MatchViewDto } from '../model/matchViewDto';
import { PatchMatchRequest } from '../model/patchMatchRequest';
import { ResetMatchRequest } from '../model/resetMatchRequest';
import { UpdateMatchRequest } from '../model/updateMatchRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class MatchesService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param accept Accept Header
     * @param matchId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMatchAppointment(accept: 'application/json', matchId: number, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public deleteMatchAppointment(accept: 'application/json', matchId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public deleteMatchAppointment(accept: 'application/json', matchId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public deleteMatchAppointment(accept: 'application/json', matchId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling deleteMatchAppointment.');
        }
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling deleteMatchAppointment.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<ExtendedMatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(matchId))}/appointment`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param matchId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMatchResult(accept: 'application/json', matchId: number, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public deleteMatchResult(accept: 'application/json', matchId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public deleteMatchResult(accept: 'application/json', matchId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public deleteMatchResult(accept: 'application/json', matchId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling deleteMatchResult.');
        }
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling deleteMatchResult.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<ExtendedMatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(matchId))}/result`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id Id of the match
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enterMatchAppointment(accept: 'application/json', id: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public enterMatchAppointment(accept: 'application/json', id: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public enterMatchAppointment(accept: 'application/json', id: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public enterMatchAppointment(accept: 'application/json', id: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling enterMatchAppointment.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling enterMatchAppointment.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ExtendedMatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}/appointment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id Id of the match
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enterMatchResult(accept: 'application/json', id: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public enterMatchResult(accept: 'application/json', id: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public enterMatchResult(accept: 'application/json', id: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public enterMatchResult(accept: 'application/json', id: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling enterMatchResult.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling enterMatchResult.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ExtendedMatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}/result`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get match by Id.
     * Get match by Id.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMatchById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public getMatchById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public getMatchById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public getMatchById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMatchById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMatchById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ExtendedMatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param teamId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMatchesForTeam(accept: 'application/json', teamId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public getMatchesForTeam(accept: 'application/json', teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public getMatchesForTeam(accept: 'application/json', teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public getMatchesForTeam(accept: 'application/json', teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMatchesForTeam.');
        }
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling getMatchesForTeam.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/matches/team/${encodeURIComponent(String(teamId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Todays matches of the signed in user
     * Todays matches of the signed in user
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public myMatchesToday(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public myMatchesToday(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public myMatchesToday(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public myMatchesToday(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling myMatchesToday.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/matches/myday`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a single match
     * Updates a single match
     * @param accept Accept Header
     * @param id 
     * @param homeTeamId 
     * @param guestTeamId 
     * @param finalDayCompetitionId 
     * @param tableId 
     * @param playDate 
     * @param registerDate 
     * @param resultDate 
     * @param leagueId 
     * @param cupId 
     * @param cupRound 
     * @param isWinnerBracketGame 
     * @param roundOrder 
     * @param isNotPlayedMatch 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchMatch(accept: 'application/json', id: number, homeTeamId?: number, guestTeamId?: number, finalDayCompetitionId?: number, tableId?: number, playDate?: Date, registerDate?: Date, resultDate?: Date, leagueId?: number, cupId?: number, cupRound?: number, isWinnerBracketGame?: boolean, roundOrder?: number, isNotPlayedMatch?: boolean, body?: PatchMatchRequest, observe?: 'body', reportProgress?: boolean): Observable<MatchDto>;
    public patchMatch(accept: 'application/json', id: number, homeTeamId?: number, guestTeamId?: number, finalDayCompetitionId?: number, tableId?: number, playDate?: Date, registerDate?: Date, resultDate?: Date, leagueId?: number, cupId?: number, cupRound?: number, isWinnerBracketGame?: boolean, roundOrder?: number, isNotPlayedMatch?: boolean, body?: PatchMatchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchDto>>;
    public patchMatch(accept: 'application/json', id: number, homeTeamId?: number, guestTeamId?: number, finalDayCompetitionId?: number, tableId?: number, playDate?: Date, registerDate?: Date, resultDate?: Date, leagueId?: number, cupId?: number, cupRound?: number, isWinnerBracketGame?: boolean, roundOrder?: number, isNotPlayedMatch?: boolean, body?: PatchMatchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchDto>>;
    public patchMatch(accept: 'application/json', id: number, homeTeamId?: number, guestTeamId?: number, finalDayCompetitionId?: number, tableId?: number, playDate?: Date, registerDate?: Date, resultDate?: Date, leagueId?: number, cupId?: number, cupRound?: number, isWinnerBracketGame?: boolean, roundOrder?: number, isNotPlayedMatch?: boolean, body?: PatchMatchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling patchMatch.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchMatch.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (homeTeamId !== undefined && homeTeamId !== null) {
            queryParameters = queryParameters.set('HomeTeamId', <any>homeTeamId);
        }
        if (guestTeamId !== undefined && guestTeamId !== null) {
            queryParameters = queryParameters.set('GuestTeamId', <any>guestTeamId);
        }
        if (finalDayCompetitionId !== undefined && finalDayCompetitionId !== null) {
            queryParameters = queryParameters.set('FinalDayCompetitionId', <any>finalDayCompetitionId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('TableId', <any>tableId);
        }
        if (playDate !== undefined && playDate !== null) {
            queryParameters = queryParameters.set('PlayDate', <any>playDate.toISOString());
        }
        if (registerDate !== undefined && registerDate !== null) {
            queryParameters = queryParameters.set('RegisterDate', <any>registerDate.toISOString());
        }
        if (resultDate !== undefined && resultDate !== null) {
            queryParameters = queryParameters.set('ResultDate', <any>resultDate.toISOString());
        }
        if (leagueId !== undefined && leagueId !== null) {
            queryParameters = queryParameters.set('LeagueId', <any>leagueId);
        }
        if (cupId !== undefined && cupId !== null) {
            queryParameters = queryParameters.set('CupId', <any>cupId);
        }
        if (cupRound !== undefined && cupRound !== null) {
            queryParameters = queryParameters.set('CupRound', <any>cupRound);
        }
        if (isWinnerBracketGame !== undefined && isWinnerBracketGame !== null) {
            queryParameters = queryParameters.set('IsWinnerBracketGame', <any>isWinnerBracketGame);
        }
        if (roundOrder !== undefined && roundOrder !== null) {
            queryParameters = queryParameters.set('RoundOrder', <any>roundOrder);
        }
        if (isNotPlayedMatch !== undefined && isNotPlayedMatch !== null) {
            queryParameters = queryParameters.set('IsNotPlayedMatch', <any>isNotPlayedMatch);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<MatchDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recent played matches (7 days).
     * Recent played matches (7 days).
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recentMatches(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public recentMatches(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public recentMatches(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public recentMatches(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling recentMatches.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/matches/recent`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetMatch(accept: 'application/json', id: number, body?: ResetMatchRequest, observe?: 'body', reportProgress?: boolean): Observable<MatchViewDto>;
    public resetMatch(accept: 'application/json', id: number, body?: ResetMatchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchViewDto>>;
    public resetMatch(accept: 'application/json', id: number, body?: ResetMatchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchViewDto>>;
    public resetMatch(accept: 'application/json', id: number, body?: ResetMatchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling resetMatch.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resetMatch.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<MatchViewDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}/reset`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upcomming matches for the next 7 days.
     * Upcomming matches for the next 7 days.
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public upcommingMatches(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public upcommingMatches(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public upcommingMatches(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public upcommingMatches(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling upcommingMatches.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/matches/upcomming`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id 
     * @param homeTeamScore 
     * @param guestTeamScore 
     * @param tableId 
     * @param playDate 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMatch(accept: 'application/json', id: number, homeTeamScore?: number, guestTeamScore?: number, tableId?: number, playDate?: Date, body?: UpdateMatchRequest, observe?: 'body', reportProgress?: boolean): Observable<MatchViewDto>;
    public updateMatch(accept: 'application/json', id: number, homeTeamScore?: number, guestTeamScore?: number, tableId?: number, playDate?: Date, body?: UpdateMatchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchViewDto>>;
    public updateMatch(accept: 'application/json', id: number, homeTeamScore?: number, guestTeamScore?: number, tableId?: number, playDate?: Date, body?: UpdateMatchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchViewDto>>;
    public updateMatch(accept: 'application/json', id: number, homeTeamScore?: number, guestTeamScore?: number, tableId?: number, playDate?: Date, body?: UpdateMatchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateMatch.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateMatch.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (homeTeamScore !== undefined && homeTeamScore !== null) {
            queryParameters = queryParameters.set('HomeTeamScore', <any>homeTeamScore);
        }
        if (guestTeamScore !== undefined && guestTeamScore !== null) {
            queryParameters = queryParameters.set('GuestTeamScore', <any>guestTeamScore);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('TableId', <any>tableId);
        }
        if (playDate !== undefined && playDate !== null) {
            queryParameters = queryParameters.set('PlayDate', <any>playDate.toISOString());
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MatchViewDto>(`${this.configuration.basePath}/matches/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
