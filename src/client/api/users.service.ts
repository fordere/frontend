/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateUserRequest } from '../model/createUserRequest';
import { ExtendedMatchDto } from '../model/extendedMatchDto';
import { MatchDto } from '../model/matchDto';
import { UpdateUserProfileRequest } from '../model/updateUserProfileRequest';
import { UpdateUserRequest } from '../model/updateUserRequest';
import { UserDto } from '../model/userDto';
import { UserProfileResponse } from '../model/userProfileResponse';
import { UsersResponse } from '../model/usersResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class UsersService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create a user.
     * Create a user.
     * @param accept Accept Header
     * @param id 
     * @param firstName 
     * @param lastName 
     * @param password 
     * @param email 
     * @param phoneNumber 
     * @param roles 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: CreateUserRequest, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public createUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: CreateUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public createUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: CreateUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public createUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: CreateUserRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createUser.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('LastName', <any>lastName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('Email', <any>email);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (roles !== undefined && roles !== null) {
            queryParameters = queryParameters.set('Roles', <any>roles);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserDto>(`${this.configuration.basePath}/users`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find users
     * Find users
     * @param accept Accept Header
     * @param competitionId 
     * @param query 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPossiblePartners(accept: 'application/json', competitionId: number, query: string, observe?: 'body', reportProgress?: boolean): Observable<Array<UserDto>>;
    public findPossiblePartners(accept: 'application/json', competitionId: number, query: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserDto>>>;
    public findPossiblePartners(accept: 'application/json', competitionId: number, query: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserDto>>>;
    public findPossiblePartners(accept: 'application/json', competitionId: number, query: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling findPossiblePartners.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling findPossiblePartners.');
        }
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling findPossiblePartners.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<UserDto>>(`${this.configuration.basePath}/users/find/${encodeURIComponent(String(query))}/${encodeURIComponent(String(competitionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all users which are possible partners for the current user for the given competition
     * Get all users which are possible partners for the current user for the given competition
     * @param accept Accept Header
     * @param competitionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPossiblePartners(accept: 'application/json', competitionId?: number, observe?: 'body', reportProgress?: boolean): Observable<UsersResponse>;
    public getAllPossiblePartners(accept: 'application/json', competitionId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersResponse>>;
    public getAllPossiblePartners(accept: 'application/json', competitionId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersResponse>>;
    public getAllPossiblePartners(accept: 'application/json', competitionId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllPossiblePartners.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (competitionId !== undefined && competitionId !== null) {
            queryParameters = queryParameters.set('CompetitionId', <any>competitionId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UsersResponse>(`${this.configuration.basePath}/users/possiblepartner`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get users.
     * Get users.
     * @param accept Accept Header
     * @param filter 
     * @param page 
     * @param pageSize 
     * @param offset 
     * @param pagingRequested 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsers(accept: 'application/json', filter?: string, page?: number, pageSize?: number, offset?: number, pagingRequested?: boolean, observe?: 'body', reportProgress?: boolean): Observable<UsersResponse>;
    public getAllUsers(accept: 'application/json', filter?: string, page?: number, pageSize?: number, offset?: number, pagingRequested?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersResponse>>;
    public getAllUsers(accept: 'application/json', filter?: string, page?: number, pageSize?: number, offset?: number, pagingRequested?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersResponse>>;
    public getAllUsers(accept: 'application/json', filter?: string, page?: number, pageSize?: number, offset?: number, pagingRequested?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllUsers.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('Filter', <any>filter);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('Page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('Offset', <any>offset);
        }
        if (pagingRequested !== undefined && pagingRequested !== null) {
            queryParameters = queryParameters.set('PagingRequested', <any>pagingRequested);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UsersResponse>(`${this.configuration.basePath}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the minimal user information of the logged in user.
     * Gets the minimal user information of the logged in user.
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyUserDetails(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public getMyUserDetails(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public getMyUserDetails(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public getMyUserDetails(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMyUserDetails.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/users/me`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the user profile of the logged in user.
     * Gets the user profile of the logged in user.
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyUserProfile(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<UserProfileResponse>;
    public getMyUserProfile(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileResponse>>;
    public getMyUserProfile(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileResponse>>;
    public getMyUserProfile(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMyUserProfile.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserProfileResponse>(`${this.configuration.basePath}/users/me/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user by Id.
     * Get user by Id.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public getUserById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public getUserById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public getUserById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getUserById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the profile of a user.
     * Get the profile of a user.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserProfile(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<UserProfileResponse>;
    public getUserProfile(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileResponse>>;
    public getUserProfile(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileResponse>>;
    public getUserProfile(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getUserProfile.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserProfile.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserProfileResponse>(`${this.configuration.basePath}/users/${encodeURIComponent(String(id))}/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a user.
     * Update a user.
     * @param accept Accept Header
     * @param id 
     * @param firstName 
     * @param lastName 
     * @param password 
     * @param email 
     * @param phoneNumber 
     * @param roles 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: UpdateUserRequest, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public updateUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: UpdateUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public updateUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: UpdateUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public updateUser(accept: 'application/json', id?: number, firstName?: string, lastName?: string, password?: string, email?: string, phoneNumber?: string, roles?: string, body?: UpdateUserRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateUser.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('LastName', <any>lastName);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('Email', <any>email);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (roles !== undefined && roles !== null) {
            queryParameters = queryParameters.set('Roles', <any>roles);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<UserDto>(`${this.configuration.basePath}/users`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update user profile (Firstname, Lastname, Email, Password, PhoneNumber).
     * Update user profile (Firstname, Lastname, Email, Password, PhoneNumber).
     * @param accept Accept Header
     * @param id 
     * @param firstName 
     * @param lastName 
     * @param email 
     * @param password 
     * @param phoneNumber 
     * @param divisionZuerich 
     * @param divisionStGallen 
     * @param divisionLuzern 
     * @param divisionWinti 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserProfile(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'body', reportProgress?: boolean): Observable<UserProfileResponse>;
    public updateUserProfile(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileResponse>>;
    public updateUserProfile(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileResponse>>;
    public updateUserProfile(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateUserProfile.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('LastName', <any>lastName);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('Email', <any>email);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (divisionZuerich !== undefined && divisionZuerich !== null) {
            queryParameters = queryParameters.set('DivisionZuerich', <any>divisionZuerich);
        }
        if (divisionStGallen !== undefined && divisionStGallen !== null) {
            queryParameters = queryParameters.set('DivisionStGallen', <any>divisionStGallen);
        }
        if (divisionLuzern !== undefined && divisionLuzern !== null) {
            queryParameters = queryParameters.set('DivisionLuzern', <any>divisionLuzern);
        }
        if (divisionWinti !== undefined && divisionWinti !== null) {
            queryParameters = queryParameters.set('DivisionWinti', <any>divisionWinti);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<UserProfileResponse>(`${this.configuration.basePath}/users/me/profile`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update user profile (Firstname, Lastname, E-Mail, Password, PhoneNumber).
     * Update user profile (Firstname, Lastname, E-Mail, Password, PhoneNumber).
     * @param accept Accept Header
     * @param id 
     * @param firstName 
     * @param lastName 
     * @param email 
     * @param password 
     * @param phoneNumber 
     * @param divisionZuerich 
     * @param divisionStGallen 
     * @param divisionLuzern 
     * @param divisionWinti 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserProfilePUT(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'body', reportProgress?: boolean): Observable<UserProfileResponse>;
    public updateUserProfilePUT(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileResponse>>;
    public updateUserProfilePUT(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileResponse>>;
    public updateUserProfilePUT(accept: 'application/json', id?: number, firstName?: string, lastName?: string, email?: string, password?: string, phoneNumber?: string, divisionZuerich?: boolean, divisionStGallen?: boolean, divisionLuzern?: boolean, divisionWinti?: boolean, body?: UpdateUserProfileRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateUserProfilePUT.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('LastName', <any>lastName);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('Email', <any>email);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('Password', <any>password);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (divisionZuerich !== undefined && divisionZuerich !== null) {
            queryParameters = queryParameters.set('DivisionZuerich', <any>divisionZuerich);
        }
        if (divisionStGallen !== undefined && divisionStGallen !== null) {
            queryParameters = queryParameters.set('DivisionStGallen', <any>divisionStGallen);
        }
        if (divisionLuzern !== undefined && divisionLuzern !== null) {
            queryParameters = queryParameters.set('DivisionLuzern', <any>divisionLuzern);
        }
        if (divisionWinti !== undefined && divisionWinti !== null) {
            queryParameters = queryParameters.set('DivisionWinti', <any>divisionWinti);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<UserProfileResponse>(`${this.configuration.basePath}/users/profile`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all matches of a user.
     * Get all matches of a user.
     * @param accept Accept Header
     * @param userId 
     * @param seasonId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userMatches(accept: 'application/json', userId: number, seasonId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public userMatches(accept: 'application/json', userId: number, seasonId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public userMatches(accept: 'application/json', userId: number, seasonId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public userMatches(accept: 'application/json', userId: number, seasonId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling userMatches.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userMatches.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (seasonId !== undefined && seasonId !== null) {
            queryParameters = queryParameters.set('SeasonId', <any>seasonId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/users/${encodeURIComponent(String(userId))}/matches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all matches of a user for the current season.
     * Get all matches of a user for the current season.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userMatchesCurrentSeason(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public userMatchesCurrentSeason(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public userMatchesCurrentSeason(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public userMatchesCurrentSeason(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling userMatchesCurrentSeason.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userMatchesCurrentSeason.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/users/${encodeURIComponent(String(id))}/matches/current-season`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all matches of a user for a specific season.
     * Get all matches of a user for a specific season.
     * @param accept Accept Header
     * @param userId 
     * @param seasonId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userMatchesGET(accept: 'application/json', userId: number, seasonId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ExtendedMatchDto>>;
    public userMatchesGET(accept: 'application/json', userId: number, seasonId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExtendedMatchDto>>>;
    public userMatchesGET(accept: 'application/json', userId: number, seasonId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExtendedMatchDto>>>;
    public userMatchesGET(accept: 'application/json', userId: number, seasonId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling userMatchesGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userMatchesGET.');
        }
        if (seasonId === null || seasonId === undefined) {
            throw new Error('Required parameter seasonId was null or undefined when calling userMatchesGET.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<ExtendedMatchDto>>(`${this.configuration.basePath}/users/${encodeURIComponent(String(userId))}/matches/${encodeURIComponent(String(seasonId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all open matches of a user.
     * Get all open matches of a user.
     * @param accept Accept Header
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userOpenMatches(accept: 'application/json', userId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MatchDto>>;
    public userOpenMatches(accept: 'application/json', userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MatchDto>>>;
    public userOpenMatches(accept: 'application/json', userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MatchDto>>>;
    public userOpenMatches(accept: 'application/json', userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling userOpenMatches.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userOpenMatches.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<MatchDto>>(`${this.configuration.basePath}/users/${encodeURIComponent(String(userId))}/openmatches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
