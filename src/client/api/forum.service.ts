/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent, HttpParameterCodec
} from '@angular/common/http';
import {CustomHttpParameterCodec} from '../encoder';
import {Observable} from 'rxjs';

import {CreatePostRequest} from '../model/createPostRequest';
import {CreateThreadRequest} from '../model/createThreadRequest';
import {ForumPostDto} from '../model/forumPostDto';
import {ForumThreadDto} from '../model/forumThreadDto';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ForumService {

  protected basePath = 'https://localhost:5001';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }


  /**
   * Create a new post in a specific thread
   * Create a new post in a specific thread
   * @param accept Accept Header
   * @param forumThreadId
   * @param text
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createPost(accept: 'application/json', forumThreadId?: number, text?: string, body?: CreatePostRequest, observe?: 'body', reportProgress?: boolean): Observable<ForumPostDto>;
  public createPost(accept: 'application/json', forumThreadId?: number, text?: string, body?: CreatePostRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ForumPostDto>>;
  public createPost(accept: 'application/json', forumThreadId?: number, text?: string, body?: CreatePostRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ForumPostDto>>;
  public createPost(accept: 'application/json', forumThreadId?: number, text?: string, body?: CreatePostRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (accept === null || accept === undefined) {
      throw new Error('Required parameter accept was null or undefined when calling createPost.');
    }

    let queryParameters = new HttpParams({encoder: this.encoder});
    if (forumThreadId !== undefined && forumThreadId !== null) {
      queryParameters = queryParameters.set('ForumThreadId', <any> forumThreadId);
    }
    if (text !== undefined && text !== null) {
      queryParameters = queryParameters.set('Text', <any> text);
    }

    let headers = this.defaultHeaders;
    if (accept !== undefined && accept !== null) {
      headers = headers.set('Accept', String(accept));
    }

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }


    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ForumPostDto>(`${this.configuration.basePath}/forum/posts`,
      body,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create a new thread
   * Create a new thread
   * @param accept Accept Header
   * @param subject
   * @param text
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createThread(accept: 'application/json', subject?: string, text?: string, body?: CreateThreadRequest, observe?: 'body', reportProgress?: boolean): Observable<ForumPostDto>;
  public createThread(accept: 'application/json', subject?: string, text?: string, body?: CreateThreadRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ForumPostDto>>;
  public createThread(accept: 'application/json', subject?: string, text?: string, body?: CreateThreadRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ForumPostDto>>;
  public createThread(accept: 'application/json', subject?: string, text?: string, body?: CreateThreadRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (accept === null || accept === undefined) {
      throw new Error('Required parameter accept was null or undefined when calling createThread.');
    }

    let queryParameters = new HttpParams({encoder: this.encoder});
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('Subject', <any> subject);
    }
    if (text !== undefined && text !== null) {
      queryParameters = queryParameters.set('Text', <any> text);
    }

    let headers = this.defaultHeaders;
    if (accept !== undefined && accept !== null) {
      headers = headers.set('Accept', String(accept));
    }

    // authentication (Bearer) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }


    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<ForumPostDto>(`${this.configuration.basePath}/forum/threads`,
      body,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets all threads from the forum
   * Gets all threads from the forum
   * @param accept Accept Header
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllThreads(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<ForumThreadDto>>;
  public getAllThreads(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ForumThreadDto>>>;
  public getAllThreads(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ForumThreadDto>>>;
  public getAllThreads(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (accept === null || accept === undefined) {
      throw new Error('Required parameter accept was null or undefined when calling getAllThreads.');
    }

    let headers = this.defaultHeaders;
    if (accept !== undefined && accept !== null) {
      headers = headers.set('Accept', String(accept));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }


    return this.httpClient.get<Array<ForumThreadDto>>(`${this.configuration.basePath}/forum`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets all threads from the forum
   * Gets all threads from the forum
   * @param accept Accept Header
   * @param forumThreadId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPostsOfThread(accept: 'application/json', forumThreadId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ForumPostDto>>;
  public getPostsOfThread(accept: 'application/json', forumThreadId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ForumPostDto>>>;
  public getPostsOfThread(accept: 'application/json', forumThreadId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ForumPostDto>>>;
  public getPostsOfThread(accept: 'application/json', forumThreadId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (accept === null || accept === undefined) {
      throw new Error('Required parameter accept was null or undefined when calling getPostsOfThread.');
    }
    if (forumThreadId === null || forumThreadId === undefined) {
      throw new Error('Required parameter forumThreadId was null or undefined when calling getPostsOfThread.');
    }

    let headers = this.defaultHeaders;
    if (accept !== undefined && accept !== null) {
      headers = headers.set('Accept', String(accept));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }


    return this.httpClient.get<Array<ForumPostDto>>(`${this.configuration.basePath}/forum/${encodeURIComponent(String(forumThreadId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets a single thread by Id
   * Gets a single thread by Id
   * @param accept Accept Header
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSingleThread(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<ForumThreadDto>;
  public getSingleThread(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ForumThreadDto>>;
  public getSingleThread(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ForumThreadDto>>;
  public getSingleThread(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (accept === null || accept === undefined) {
      throw new Error('Required parameter accept was null or undefined when calling getSingleThread.');
    }
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getSingleThread.');
    }

    let headers = this.defaultHeaders;
    if (accept !== undefined && accept !== null) {
      headers = headers.set('Accept', String(accept));
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }


    return this.httpClient.get<ForumThreadDto>(`${this.configuration.basePath}/forum/threads/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
