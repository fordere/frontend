/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { AddCompetitionRequest } from '../model/addCompetitionRequest';
import { CompetitionDto } from '../model/competitionDto';
import { CompetitionRegisterRequest } from '../model/competitionRegisterRequest';
import { CompetitionStateDto } from '../model/competitionStateDto';
import { CreateTeamsAndMatchesRequest } from '../model/createTeamsAndMatchesRequest';
import { ExtendedMatchDto } from '../model/extendedMatchDto';
import { LeagueDto } from '../model/leagueDto';
import { UpdateCompetitionRequest } from '../model/updateCompetitionRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class CompetitionsService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create a new competition
     * Create a new competition
     * @param accept Accept Header
     * @param name 
     * @param registrationText 
     * @param rules 
     * @param modus 
     * @param seasonId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCompetition(accept: 'application/json', name?: string, registrationText?: string, rules?: string, modus?: string, seasonId?: number, body?: AddCompetitionRequest, observe?: 'body', reportProgress?: boolean): Observable<CompetitionDto>;
    public addCompetition(accept: 'application/json', name?: string, registrationText?: string, rules?: string, modus?: string, seasonId?: number, body?: AddCompetitionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetitionDto>>;
    public addCompetition(accept: 'application/json', name?: string, registrationText?: string, rules?: string, modus?: string, seasonId?: number, body?: AddCompetitionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetitionDto>>;
    public addCompetition(accept: 'application/json', name?: string, registrationText?: string, rules?: string, modus?: string, seasonId?: number, body?: AddCompetitionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling addCompetition.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (registrationText !== undefined && registrationText !== null) {
            queryParameters = queryParameters.set('RegistrationText', <any>registrationText);
        }
        if (rules !== undefined && rules !== null) {
            queryParameters = queryParameters.set('Rules', <any>rules);
        }
        if (modus !== undefined && modus !== null) {
            queryParameters = queryParameters.set('Modus', <any>modus);
        }
        if (seasonId !== undefined && seasonId !== null) {
            queryParameters = queryParameters.set('SeasonId', <any>seasonId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CompetitionDto>(`${this.configuration.basePath}/competitions`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register for a league.
     * Register for a league.
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public competitionRegister(accept: 'application/json', competitionId: object, body?: CompetitionRegisterRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public competitionRegister(accept: 'application/json', competitionId: object, body?: CompetitionRegisterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public competitionRegister(accept: 'application/json', competitionId: object, body?: CompetitionRegisterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public competitionRegister(accept: 'application/json', competitionId: object, body?: CompetitionRegisterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling competitionRegister.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling competitionRegister.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(competitionId))}/register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generates all Teams &amp; Matches for a competition. Existing Teams/Matches will be deleted.
     * Generates all Teams &amp; Matches for a competition. Existing Teams/Matches will be deleted.
     * @param accept Accept Header
     * @param competitionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTeamsAndMatches(accept: 'application/json', competitionId: number, body?: CreateTeamsAndMatchesRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTeamsAndMatches(accept: 'application/json', competitionId: number, body?: CreateTeamsAndMatchesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTeamsAndMatches(accept: 'application/json', competitionId: number, body?: CreateTeamsAndMatchesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTeamsAndMatches(accept: 'application/json', competitionId: number, body?: CreateTeamsAndMatchesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createTeamsAndMatches.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling createTeamsAndMatches.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(competitionId))}/generate`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all competitions
     * Gets all competitions
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCompetitions(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<CompetitionDto>>;
    public getAllCompetitions(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CompetitionDto>>>;
    public getAllCompetitions(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CompetitionDto>>>;
    public getAllCompetitions(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllCompetitions.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<CompetitionDto>>(`${this.configuration.basePath}/competitions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all competitions in current season
     * Gets all competitions in current season
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCompetitionsInCurrent(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<CompetitionDto>>;
    public getAllCompetitionsInCurrent(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CompetitionDto>>>;
    public getAllCompetitionsInCurrent(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CompetitionDto>>>;
    public getAllCompetitionsInCurrent(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllCompetitionsInCurrent.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<CompetitionDto>>(`${this.configuration.basePath}/competitions/season/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all competitions in a season
     * Gets all competitions in a season
     * @param accept Accept Header
     * @param seasonId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCompetitionsInSeason(accept: 'application/json', seasonId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CompetitionDto>>;
    public getAllCompetitionsInSeason(accept: 'application/json', seasonId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CompetitionDto>>>;
    public getAllCompetitionsInSeason(accept: 'application/json', seasonId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CompetitionDto>>>;
    public getAllCompetitionsInSeason(accept: 'application/json', seasonId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllCompetitionsInSeason.');
        }
        if (seasonId === null || seasonId === undefined) {
            throw new Error('Required parameter seasonId was null or undefined when calling getAllCompetitionsInSeason.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<CompetitionDto>>(`${this.configuration.basePath}/competitions/season/${encodeURIComponent(String(seasonId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets competition by Id
     * Gets competition by Id
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompetitionById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<CompetitionDto>;
    public getCompetitionById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetitionDto>>;
    public getCompetitionById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetitionDto>>;
    public getCompetitionById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getCompetitionById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompetitionById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<CompetitionDto>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the state of a competition
     * Returns the state of a competition
     * @param accept Accept Header
     * @param competitionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompetitionState(accept: 'application/json', competitionId: number, observe?: 'body', reportProgress?: boolean): Observable<CompetitionStateDto>;
    public getCompetitionState(accept: 'application/json', competitionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetitionStateDto>>;
    public getCompetitionState(accept: 'application/json', competitionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetitionStateDto>>;
    public getCompetitionState(accept: 'application/json', competitionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getCompetitionState.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling getCompetitionState.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<CompetitionStateDto>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(competitionId))}/state`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get leagues by competition.
     * Get leagues by competition.
     * @param accept Accept Header
     * @param competitionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLeagueByCompetitionId(accept: 'application/json', competitionId: number, observe?: 'body', reportProgress?: boolean): Observable<LeagueDto>;
    public getLeagueByCompetitionId(accept: 'application/json', competitionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeagueDto>>;
    public getLeagueByCompetitionId(accept: 'application/json', competitionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeagueDto>>;
    public getLeagueByCompetitionId(accept: 'application/json', competitionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getLeagueByCompetitionId.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling getLeagueByCompetitionId.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<LeagueDto>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(competitionId))}/leagues`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get matches from competition.
     * Get matches from competition.
     * @param accept Accept Header
     * @param id Id of the competition
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMatchesByCompetition(accept: 'application/json', id: object, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public getMatchesByCompetition(accept: 'application/json', id: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public getMatchesByCompetition(accept: 'application/json', id: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public getMatchesByCompetition(accept: 'application/json', id: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMatchesByCompetition.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMatchesByCompetition.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ExtendedMatchDto>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(id))}/matches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all ranking tables of a competition.
     * Get all ranking tables of a competition.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStandingsFromCompetitions(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStandingsFromCompetitions(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStandingsFromCompetitions(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStandingsFromCompetitions(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getStandingsFromCompetitions.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getStandingsFromCompetitions.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(id))}/standings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all teams of a competition.
     * Get all teams of a competition.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamsFromCompetitions(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTeamsFromCompetitions(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTeamsFromCompetitions(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTeamsFromCompetitions(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getTeamsFromCompetitions.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTeamsFromCompetitions.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(id))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the not played match on all not played matches in a competition
     * Sets the not played match on all not played matches in a competition
     * @param accept Accept Header
     * @param competitionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setMatchesNotPlayed(accept: 'application/json', competitionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setMatchesNotPlayed(accept: 'application/json', competitionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setMatchesNotPlayed(accept: 'application/json', competitionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setMatchesNotPlayed(accept: 'application/json', competitionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling setMatchesNotPlayed.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling setMatchesNotPlayed.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/competitions/${encodeURIComponent(String(competitionId))}/updateNotPlayed`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a competition.
     * Update a competition.
     * @param accept Accept Header
     * @param id 
     * @param name 
     * @param registrationText 
     * @param rules 
     * @param modus 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompetition(accept: 'application/json', id?: number, name?: string, registrationText?: string, rules?: string, modus?: string, body?: UpdateCompetitionRequest, observe?: 'body', reportProgress?: boolean): Observable<CompetitionDto>;
    public updateCompetition(accept: 'application/json', id?: number, name?: string, registrationText?: string, rules?: string, modus?: string, body?: UpdateCompetitionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetitionDto>>;
    public updateCompetition(accept: 'application/json', id?: number, name?: string, registrationText?: string, rules?: string, modus?: string, body?: UpdateCompetitionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetitionDto>>;
    public updateCompetition(accept: 'application/json', id?: number, name?: string, registrationText?: string, rules?: string, modus?: string, body?: UpdateCompetitionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateCompetition.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (registrationText !== undefined && registrationText !== null) {
            queryParameters = queryParameters.set('RegistrationText', <any>registrationText);
        }
        if (rules !== undefined && rules !== null) {
            queryParameters = queryParameters.set('Rules', <any>rules);
        }
        if (modus !== undefined && modus !== null) {
            queryParameters = queryParameters.set('Modus', <any>modus);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CompetitionDto>(`${this.configuration.basePath}/competitions`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
