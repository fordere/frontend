/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { TeamDto } from '../model/teamDto';
import { UpdateTeamRequest } from '../model/updateTeamRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TeamsService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Delete a team.
     * Delete a team.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeam(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTeam(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTeam(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTeam(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling deleteTeam.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTeam.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get team by Id.
     * Get team by Id.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<TeamDto>;
    public getTeamById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamDto>>;
    public getTeamById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamDto>>;
    public getTeamById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getTeamById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTeamById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<TeamDto>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a team
     * Updates a team
     * @param accept Accept Header
     * @param id 
     * @param barId 
     * @param name 
     * @param seasonAmbition 
     * @param isForfaitOut 
     * @param player1Id 
     * @param player2Id 
     * @param wishPlayDay 
     * @param qualifiedForFinalDay 
     * @param qualifiedForFinalDayComment 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTeam(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'body', reportProgress?: boolean): Observable<TeamDto>;
    public updateTeam(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamDto>>;
    public updateTeam(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamDto>>;
    public updateTeam(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateTeam.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTeam.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (barId !== undefined && barId !== null) {
            queryParameters = queryParameters.set('BarId', <any>barId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (seasonAmbition !== undefined && seasonAmbition !== null) {
            queryParameters = queryParameters.set('SeasonAmbition', <any>seasonAmbition);
        }
        if (isForfaitOut !== undefined && isForfaitOut !== null) {
            queryParameters = queryParameters.set('IsForfaitOut', <any>isForfaitOut);
        }
        if (player1Id !== undefined && player1Id !== null) {
            queryParameters = queryParameters.set('Player1Id', <any>player1Id);
        }
        if (player2Id !== undefined && player2Id !== null) {
            queryParameters = queryParameters.set('Player2Id', <any>player2Id);
        }
        if (wishPlayDay !== undefined && wishPlayDay !== null) {
            queryParameters = queryParameters.set('WishPlayDay', <any>wishPlayDay);
        }
        if (qualifiedForFinalDay !== undefined && qualifiedForFinalDay !== null) {
            queryParameters = queryParameters.set('QualifiedForFinalDay', <any>qualifiedForFinalDay);
        }
        if (qualifiedForFinalDayComment !== undefined && qualifiedForFinalDayComment !== null) {
            queryParameters = queryParameters.set('QualifiedForFinalDayComment', <any>qualifiedForFinalDayComment);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TeamDto>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a team
     * Updates a team
     * @param accept Accept Header
     * @param id 
     * @param barId 
     * @param name 
     * @param seasonAmbition 
     * @param isForfaitOut 
     * @param player1Id 
     * @param player2Id 
     * @param wishPlayDay 
     * @param qualifiedForFinalDay 
     * @param qualifiedForFinalDayComment 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTeamPATCH(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'body', reportProgress?: boolean): Observable<TeamDto>;
    public updateTeamPATCH(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamDto>>;
    public updateTeamPATCH(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamDto>>;
    public updateTeamPATCH(accept: 'application/json', id: number, barId?: number, name?: string, seasonAmbition?: string, isForfaitOut?: boolean, player1Id?: number, player2Id?: number, wishPlayDay?: string, qualifiedForFinalDay?: string, qualifiedForFinalDayComment?: string, body?: UpdateTeamRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateTeamPATCH.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTeamPATCH.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (barId !== undefined && barId !== null) {
            queryParameters = queryParameters.set('BarId', <any>barId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (seasonAmbition !== undefined && seasonAmbition !== null) {
            queryParameters = queryParameters.set('SeasonAmbition', <any>seasonAmbition);
        }
        if (isForfaitOut !== undefined && isForfaitOut !== null) {
            queryParameters = queryParameters.set('IsForfaitOut', <any>isForfaitOut);
        }
        if (player1Id !== undefined && player1Id !== null) {
            queryParameters = queryParameters.set('Player1Id', <any>player1Id);
        }
        if (player2Id !== undefined && player2Id !== null) {
            queryParameters = queryParameters.set('Player2Id', <any>player2Id);
        }
        if (wishPlayDay !== undefined && wishPlayDay !== null) {
            queryParameters = queryParameters.set('WishPlayDay', <any>wishPlayDay);
        }
        if (qualifiedForFinalDay !== undefined && qualifiedForFinalDay !== null) {
            queryParameters = queryParameters.set('QualifiedForFinalDay', <any>qualifiedForFinalDay);
        }
        if (qualifiedForFinalDayComment !== undefined && qualifiedForFinalDayComment !== null) {
            queryParameters = queryParameters.set('QualifiedForFinalDayComment', <any>qualifiedForFinalDayComment);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<TeamDto>(`${this.configuration.basePath}/teams/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
