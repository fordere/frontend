/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateTeamInscriptionRequest } from '../model/createTeamInscriptionRequest';
import { TeamInscriptionDto } from '../model/teamInscriptionDto';
import { UpdateAssignedLeagueRequest } from '../model/updateAssignedLeagueRequest';
import { UpdateTeamInscriptionRequest } from '../model/updateTeamInscriptionRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TeaminscriptionsService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create a new Teaminscription
     * Create a new Teaminscription
     * @param accept Accept Header
     * @param name 
     * @param player1Id 
     * @param player2Id 
     * @param barId 
     * @param seasonAmbition 
     * @param competitionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTeamInscription(accept: 'application/json', name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, competitionId?: number, body?: CreateTeamInscriptionRequest, observe?: 'body', reportProgress?: boolean): Observable<TeamInscriptionDto>;
    public createTeamInscription(accept: 'application/json', name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, competitionId?: number, body?: CreateTeamInscriptionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamInscriptionDto>>;
    public createTeamInscription(accept: 'application/json', name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, competitionId?: number, body?: CreateTeamInscriptionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamInscriptionDto>>;
    public createTeamInscription(accept: 'application/json', name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, competitionId?: number, body?: CreateTeamInscriptionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createTeamInscription.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (player1Id !== undefined && player1Id !== null) {
            queryParameters = queryParameters.set('Player1Id', <any>player1Id);
        }
        if (player2Id !== undefined && player2Id !== null) {
            queryParameters = queryParameters.set('Player2Id', <any>player2Id);
        }
        if (barId !== undefined && barId !== null) {
            queryParameters = queryParameters.set('BarId', <any>barId);
        }
        if (seasonAmbition !== undefined && seasonAmbition !== null) {
            queryParameters = queryParameters.set('SeasonAmbition', <any>seasonAmbition);
        }
        if (competitionId !== undefined && competitionId !== null) {
            queryParameters = queryParameters.set('CompetitionId', <any>competitionId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TeamInscriptionDto>(`${this.configuration.basePath}/teaminscriptions`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a teaminscription.
     * Delete a teaminscription.
     * @param accept Accept Header
     * @param teamInscriptionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeamInscription(accept: 'application/json', teamInscriptionId: number, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public deleteTeamInscription(accept: 'application/json', teamInscriptionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public deleteTeamInscription(accept: 'application/json', teamInscriptionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public deleteTeamInscription(accept: 'application/json', teamInscriptionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling deleteTeamInscription.');
        }
        if (teamInscriptionId === null || teamInscriptionId === undefined) {
            throw new Error('Required parameter teamInscriptionId was null or undefined when calling deleteTeamInscription.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<object>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(teamInscriptionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get a teaminscription
     * get a teaminscription
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamInscriptionById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<TeamInscriptionDto>;
    public getTeamInscriptionById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamInscriptionDto>>;
    public getTeamInscriptionById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamInscriptionDto>>;
    public getTeamInscriptionById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getTeamInscriptionById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTeamInscriptionById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<TeamInscriptionDto>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notAssignedTeamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public notAssignedTeamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public notAssignedTeamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public notAssignedTeamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling notAssignedTeamInscriptionsByCompetition.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling notAssignedTeamInscriptionsByCompetition.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<object>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(competitionId))}/notAssigned`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notAssignedTeamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public notAssignedTeamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public notAssignedTeamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public notAssignedTeamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling notAssignedTeamInscriptionsByCompetitionDELETE.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling notAssignedTeamInscriptionsByCompetitionDELETE.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<object>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(competitionId))}/notAssigned`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notAssignedTeamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public notAssignedTeamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public notAssignedTeamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public notAssignedTeamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling notAssignedTeamInscriptionsByCompetitionPOST.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling notAssignedTeamInscriptionsByCompetitionPOST.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<object>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(competitionId))}/notAssigned`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notAssignedTeamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public notAssignedTeamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public notAssignedTeamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public notAssignedTeamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling notAssignedTeamInscriptionsByCompetitionPUT.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling notAssignedTeamInscriptionsByCompetitionPUT.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<object>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(competitionId))}/notAssigned`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public teamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public teamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public teamInscriptionsByCompetition(accept: 'application/json', competitionId: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling teamInscriptionsByCompetition.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling teamInscriptionsByCompetition.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<object>(`${this.configuration.basePath}/teaminscriptions/competition/${encodeURIComponent(String(competitionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public teamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public teamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public teamInscriptionsByCompetitionDELETE(accept: 'application/json', competitionId: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling teamInscriptionsByCompetitionDELETE.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling teamInscriptionsByCompetitionDELETE.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<object>(`${this.configuration.basePath}/teaminscriptions/competition/${encodeURIComponent(String(competitionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public teamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public teamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public teamInscriptionsByCompetitionPOST(accept: 'application/json', competitionId: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling teamInscriptionsByCompetitionPOST.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling teamInscriptionsByCompetitionPOST.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<object>(`${this.configuration.basePath}/teaminscriptions/competition/${encodeURIComponent(String(competitionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param competitionId Id of the Competition
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public teamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public teamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public teamInscriptionsByCompetitionPUT(accept: 'application/json', competitionId: object, body?: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling teamInscriptionsByCompetitionPUT.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling teamInscriptionsByCompetitionPUT.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<object>(`${this.configuration.basePath}/teaminscriptions/competition/${encodeURIComponent(String(competitionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Saves a single league registration
     * Saves a single league registration
     * @param accept Accept Header
     * @param id 
     * @param assignedLeagueId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssignedLeague(accept: 'application/json', id: number, assignedLeagueId?: number, body?: UpdateAssignedLeagueRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAssignedLeague(accept: 'application/json', id: number, assignedLeagueId?: number, body?: UpdateAssignedLeagueRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAssignedLeague(accept: 'application/json', id: number, assignedLeagueId?: number, body?: UpdateAssignedLeagueRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAssignedLeague(accept: 'application/json', id: number, assignedLeagueId?: number, body?: UpdateAssignedLeagueRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateAssignedLeague.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAssignedLeague.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (assignedLeagueId !== undefined && assignedLeagueId !== null) {
            queryParameters = queryParameters.set('AssignedLeagueId', <any>assignedLeagueId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(id))}/updateassignedleague`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a teaminscription
     * Update a teaminscription
     * @param accept Accept Header
     * @param id 
     * @param name 
     * @param player1Id 
     * @param player2Id 
     * @param barId 
     * @param seasonAmbition 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTeamInscription(accept: 'application/json', id: number, name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, body?: UpdateTeamInscriptionRequest, observe?: 'body', reportProgress?: boolean): Observable<TeamInscriptionDto>;
    public updateTeamInscription(accept: 'application/json', id: number, name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, body?: UpdateTeamInscriptionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamInscriptionDto>>;
    public updateTeamInscription(accept: 'application/json', id: number, name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, body?: UpdateTeamInscriptionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamInscriptionDto>>;
    public updateTeamInscription(accept: 'application/json', id: number, name?: string, player1Id?: number, player2Id?: number, barId?: number, seasonAmbition?: string, body?: UpdateTeamInscriptionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateTeamInscription.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTeamInscription.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (player1Id !== undefined && player1Id !== null) {
            queryParameters = queryParameters.set('Player1Id', <any>player1Id);
        }
        if (player2Id !== undefined && player2Id !== null) {
            queryParameters = queryParameters.set('Player2Id', <any>player2Id);
        }
        if (barId !== undefined && barId !== null) {
            queryParameters = queryParameters.set('BarId', <any>barId);
        }
        if (seasonAmbition !== undefined && seasonAmbition !== null) {
            queryParameters = queryParameters.set('SeasonAmbition', <any>seasonAmbition);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TeamInscriptionDto>(`${this.configuration.basePath}/teaminscriptions/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
