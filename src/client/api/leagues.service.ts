/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { AddLeagueRequest } from '../model/addLeagueRequest';
import { CreateTeamAndMatchFromTeamInscriptionRequest } from '../model/createTeamAndMatchFromTeamInscriptionRequest';
import { ExtendedMatchDto } from '../model/extendedMatchDto';
import { LeagueDto } from '../model/leagueDto';
import { MoveTeamToLeagueRequest } from '../model/moveTeamToLeagueRequest';
import { UpdateLeagueRequest } from '../model/updateLeagueRequest';
import { UserMailsDto } from '../model/userMailsDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class LeaguesService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create league
     * Create league
     * @param accept Accept Header
     * @param leagueMatchCreationMode 
     * @param number 
     * @param group 
     * @param competitionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLeague(accept: 'application/json', leagueMatchCreationMode?: string, number?: number, group?: number, competitionId?: number, body?: AddLeagueRequest, observe?: 'body', reportProgress?: boolean): Observable<LeagueDto>;
    public addLeague(accept: 'application/json', leagueMatchCreationMode?: string, number?: number, group?: number, competitionId?: number, body?: AddLeagueRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeagueDto>>;
    public addLeague(accept: 'application/json', leagueMatchCreationMode?: string, number?: number, group?: number, competitionId?: number, body?: AddLeagueRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeagueDto>>;
    public addLeague(accept: 'application/json', leagueMatchCreationMode?: string, number?: number, group?: number, competitionId?: number, body?: AddLeagueRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling addLeague.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (leagueMatchCreationMode !== undefined && leagueMatchCreationMode !== null) {
            queryParameters = queryParameters.set('LeagueMatchCreationMode', <any>leagueMatchCreationMode);
        }
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }
        if (group !== undefined && group !== null) {
            queryParameters = queryParameters.set('Group', <any>group);
        }
        if (competitionId !== undefined && competitionId !== null) {
            queryParameters = queryParameters.set('CompetitionId', <any>competitionId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<LeagueDto>(`${this.configuration.basePath}/leagues`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param teamInscriptionId 
     * @param leagueId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTeamAndMatchFromTeamInscription(accept: 'application/json', teamInscriptionId: number, leagueId: number, body?: CreateTeamAndMatchFromTeamInscriptionRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTeamAndMatchFromTeamInscription(accept: 'application/json', teamInscriptionId: number, leagueId: number, body?: CreateTeamAndMatchFromTeamInscriptionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTeamAndMatchFromTeamInscription(accept: 'application/json', teamInscriptionId: number, leagueId: number, body?: CreateTeamAndMatchFromTeamInscriptionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTeamAndMatchFromTeamInscription(accept: 'application/json', teamInscriptionId: number, leagueId: number, body?: CreateTeamAndMatchFromTeamInscriptionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createTeamAndMatchFromTeamInscription.');
        }
        if (teamInscriptionId === null || teamInscriptionId === undefined) {
            throw new Error('Required parameter teamInscriptionId was null or undefined when calling createTeamAndMatchFromTeamInscription.');
        }
        if (leagueId === null || leagueId === undefined) {
            throw new Error('Required parameter leagueId was null or undefined when calling createTeamAndMatchFromTeamInscription.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(leagueId))}/assignfromteaminscription/${encodeURIComponent(String(teamInscriptionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get league by Id
     * Get league by Id
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLeagueById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<LeagueDto>;
    public getLeagueById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeagueDto>>;
    public getLeagueById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeagueDto>>;
    public getLeagueById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getLeagueById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLeagueById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<LeagueDto>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get matches from league.
     * Get matches from league.
     * @param accept Accept Header
     * @param id Id of the league
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMatchesByLeague(accept: 'application/json', id: object, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public getMatchesByLeague(accept: 'application/json', id: object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public getMatchesByLeague(accept: 'application/json', id: object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public getMatchesByLeague(accept: 'application/json', id: object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getMatchesByLeague.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMatchesByLeague.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ExtendedMatchDto>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(id))}/matches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all player emails for all open matches in a league.
     * Gets all player emails for all open matches in a league.
     * @param accept Accept Header
     * @param leagueId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserMailsForOpenMatchesInLeague(accept: 'application/json', leagueId: number, observe?: 'body', reportProgress?: boolean): Observable<UserMailsDto>;
    public getUserMailsForOpenMatchesInLeague(accept: 'application/json', leagueId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserMailsDto>>;
    public getUserMailsForOpenMatchesInLeague(accept: 'application/json', leagueId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserMailsDto>>;
    public getUserMailsForOpenMatchesInLeague(accept: 'application/json', leagueId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getUserMailsForOpenMatchesInLeague.');
        }
        if (leagueId === null || leagueId === undefined) {
            throw new Error('Required parameter leagueId was null or undefined when calling getUserMailsForOpenMatchesInLeague.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserMailsDto>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(leagueId))}/open-matches/usermails`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Move a team to a specific league.
     * Move a team to a specific league.
     * @param accept Accept Header
     * @param id 
     * @param teamId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveTeamToLeague(accept: 'application/json', id: number, teamId?: number, body?: MoveTeamToLeagueRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public moveTeamToLeague(accept: 'application/json', id: number, teamId?: number, body?: MoveTeamToLeagueRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public moveTeamToLeague(accept: 'application/json', id: number, teamId?: number, body?: MoveTeamToLeagueRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public moveTeamToLeague(accept: 'application/json', id: number, teamId?: number, body?: MoveTeamToLeagueRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling moveTeamToLeague.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling moveTeamToLeague.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (teamId !== undefined && teamId !== null) {
            queryParameters = queryParameters.set('TeamId', <any>teamId);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(id))}/teams`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update league
     * Update league
     * @param accept Accept Header
     * @param id 
     * @param leagueMatchCreationMode 
     * @param number 
     * @param group 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLeague(accept: 'application/json', id: number, leagueMatchCreationMode?: string, number?: number, group?: number, body?: UpdateLeagueRequest, observe?: 'body', reportProgress?: boolean): Observable<LeagueDto>;
    public updateLeague(accept: 'application/json', id: number, leagueMatchCreationMode?: string, number?: number, group?: number, body?: UpdateLeagueRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeagueDto>>;
    public updateLeague(accept: 'application/json', id: number, leagueMatchCreationMode?: string, number?: number, group?: number, body?: UpdateLeagueRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeagueDto>>;
    public updateLeague(accept: 'application/json', id: number, leagueMatchCreationMode?: string, number?: number, group?: number, body?: UpdateLeagueRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling updateLeague.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLeague.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (leagueMatchCreationMode !== undefined && leagueMatchCreationMode !== null) {
            queryParameters = queryParameters.set('LeagueMatchCreationMode', <any>leagueMatchCreationMode);
        }
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }
        if (group !== undefined && group !== null) {
            queryParameters = queryParameters.set('Group', <any>group);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<LeagueDto>(`${this.configuration.basePath}/leagues/${encodeURIComponent(String(id))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
