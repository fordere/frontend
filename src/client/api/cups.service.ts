/**
 * Fordere WebService Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateCupRoundRequest } from '../model/createCupRoundRequest';
import { Cup2Dto } from '../model/cup2Dto';
import { CupDto } from '../model/cupDto';
import { ExtendedMatchDto } from '../model/extendedMatchDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class CupsService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Generates all firstround matches for a cup.
     * Generates all firstround matches for a cup.
     * @param accept Accept Header
     * @param id 
     * @param competitionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCupFromLeague(accept: 'application/json', id: number, competitionId: number, observe?: 'body', reportProgress?: boolean): Observable<CupDto>;
    public createCupFromLeague(accept: 'application/json', id: number, competitionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CupDto>>;
    public createCupFromLeague(accept: 'application/json', id: number, competitionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CupDto>>;
    public createCupFromLeague(accept: 'application/json', id: number, competitionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createCupFromLeague.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createCupFromLeague.');
        }
        if (competitionId === null || competitionId === undefined) {
            throw new Error('Required parameter competitionId was null or undefined when calling createCupFromLeague.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<CupDto>(`${this.configuration.basePath}/cups/${encodeURIComponent(String(id))}/create/${encodeURIComponent(String(competitionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new cup round.
     * Creates a new cup round.
     * @param accept Accept Header
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCupRound(accept: 'application/json', id: number, body?: CreateCupRoundRequest, observe?: 'body', reportProgress?: boolean): Observable<CupDto>;
    public createCupRound(accept: 'application/json', id: number, body?: CreateCupRoundRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CupDto>>;
    public createCupRound(accept: 'application/json', id: number, body?: CreateCupRoundRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CupDto>>;
    public createCupRound(accept: 'application/json', id: number, body?: CreateCupRoundRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createCupRound.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createCupRound.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CupDto>(`${this.configuration.basePath}/cups/${encodeURIComponent(String(id))}/rounds`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all cups.
     * Get all cups.
     * @param accept Accept Header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCups(accept: 'application/json', observe?: 'body', reportProgress?: boolean): Observable<Array<Cup2Dto>>;
    public getAllCups(accept: 'application/json', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cup2Dto>>>;
    public getAllCups(accept: 'application/json', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cup2Dto>>>;
    public getAllCups(accept: 'application/json', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getAllCups.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Cup2Dto>>(`${this.configuration.basePath}/cups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get cup by Id.
     * Get cup by Id.
     * @param accept Accept Header
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCupById(accept: 'application/json', id: number, observe?: 'body', reportProgress?: boolean): Observable<Cup2Dto>;
    public getCupById(accept: 'application/json', id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cup2Dto>>;
    public getCupById(accept: 'application/json', id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cup2Dto>>;
    public getCupById(accept: 'application/json', id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getCupById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCupById.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Cup2Dto>(`${this.configuration.basePath}/cups/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id 
     * @param cupRound 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCupMatches(accept: 'application/json', id: number, cupRound?: number, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public getCupMatches(accept: 'application/json', id: number, cupRound?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public getCupMatches(accept: 'application/json', id: number, cupRound?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public getCupMatches(accept: 'application/json', id: number, cupRound?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getCupMatches.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCupMatches.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (cupRound !== undefined && cupRound !== null) {
            queryParameters = queryParameters.set('CupRound', <any>cupRound);
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ExtendedMatchDto>(`${this.configuration.basePath}/cups/${encodeURIComponent(String(id))}/matches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param accept Accept Header
     * @param id 
     * @param cupRound 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCupMatchesGET(accept: 'application/json', id: number, cupRound: number, observe?: 'body', reportProgress?: boolean): Observable<ExtendedMatchDto>;
    public getCupMatchesGET(accept: 'application/json', id: number, cupRound: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedMatchDto>>;
    public getCupMatchesGET(accept: 'application/json', id: number, cupRound: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedMatchDto>>;
    public getCupMatchesGET(accept: 'application/json', id: number, cupRound: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling getCupMatchesGET.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCupMatchesGET.');
        }
        if (cupRound === null || cupRound === undefined) {
            throw new Error('Required parameter cupRound was null or undefined when calling getCupMatchesGET.');
        }

        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers = headers.set('Accept', String(accept));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<ExtendedMatchDto>(`${this.configuration.basePath}/cups/${encodeURIComponent(String(id))}/round/${encodeURIComponent(String(cupRound))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
